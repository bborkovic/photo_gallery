<?php 

require_once(LIB_PATH.DS."database.php");

class DatabaseObject {

	// static field that must be changed in every class
	protected static $table_name = "dummy";
	protected static $db_fields = array('id', 'dummy' ); // database columns
	// 

	// database columns:
	// public $column1;
	// public $column2;

	// and all other instance variables 
	// 
	// 


	// Static database methods
	public static function find_by_sql($sql="") {
		global $database;
		$result_set = $database->query($sql);
		$object_array = array();
		while ($row = $database->fetch_array($result_set)){
			// append to array
			$object_array[] = static::instantiate($row);
		}

		return $object_array;
		// returns handle
	}

	public static function find_by_id($id=0) {
		global $database;
		$result_array = static::find_by_sql("select * from " . static::$table_name . " where id = " . $database->escape_value($id) . " limit 1");
		return !empty($result_array) ? array_shift($result_array) : false;
		// return array
	}

	public static function find_all() {
		return static::find_by_sql("select * from " . static::$table_name);
		// returns handle()
	}

	public static function count_all(){
		global $database;
		return $database->count_by_sql("select count(*) from " . static::$table_name );
	}

	private static function instantiate($record){
		
		$class_name = get_called_class();
		$object = new $class_name;

		// $object->id = $record['id'];
		// $object->username = $record['username'];
		// $object->password = $record['password'];
		// $object->first_name = $record['first_name'];
		// $object->last_name = $record['last_name'];
		
		foreach ($record as $attribute => $value) {
			if($object->has_attribute($attribute)){
				$object->$attribute = $value;
			}
		}
		return $object;
	}
	// End of static database methods




 
	// helper methods
	private function has_attribute($attribute) {
		$object_vars = get_object_vars($this);
		return array_key_exists($attribute, $object_vars);
	}

	private function attributes() {
		$attributes = array();
		foreach( static::$db_fields as $field) {
			if ( property_exists($this, $field)) {
				$attributes[$field] = $this->$field;
			}
		}
		return $attributes;
	}
	// End of heleper methods


	// Common CRUD methods
	public function create() {
		// insert existing instance object into database
		global $database;
		$attributes = $this->attributes();
		unset($attributes["id"]);
		$sql = "insert into " . static::$table_name . " ";
		$sql .= " ( " . join(", ", array_keys($attributes) ) . " ) ";
		$sql .= " values ('" . join("','" , array_values($attributes)) . "')";

		if( $database->query($sql) ) {
			// set id generated by database engine
			$this->id = $database->insert_id();
			return true;
		} else {
			return false;
		}
	}

	public function update() {
		// update existing instance object into database
		global $database;
		$attributes = $this->attributes();
		unset($attributes["id"]); // remove id from list
		$attributes_for_update = array();
		foreach($attributes as $k => $v) {
			$attributes_for_update[] = "{$k} = '{$v}'";
		}

		$sql = "update " . static::$table_name . " ";
		$sql .= " set " . join(", ", $attributes_for_update) . " ";
		$sql .= " where id = " . $this->id;

		if( $database->query($sql) ) {
			return true;
		} else {
			return false;
		}
	}

	public function delete() {
		// insert existing instance object into database
		global $database;
		$sql = "delete from " . static::$table_name . " where id = " . $this->id . " limit 1";
		// echo $sql;
		$database->query($sql);
		if($database->affected_rows() == 1) { return true; } else { return false; }
	}
	// End of Common CRUD methods

}

?>